import logging
import time
from datetime import datetime

# Configure logger
logger = logging.getLogger('EDUGuard.AlertManager')

class AlertManager:
    """Manages posture alerts generated by the monitoring system"""
    
    ALERT_LEVELS = {
        'info': 0,
        'warning': 1, 
        'critical': 2
    }
    
    def __init__(self, db_manager):
        """Initialize the alert manager
        
        Args:
            db_manager: Database manager instance for storing alerts
        """
        self.db_manager = db_manager
        self.alert_thresholds = {
            'posture': {
                'bad_percentage_threshold': 60,  # Alert if >60% bad posture
                'minimum_samples': 10,           # Need at least 10 samples
                'cooldown_seconds': 300          # 5 minutes between alerts
            },
            'cvs': {
                'high_blink_threshold': 20,      # Alert if >20 blinks/min (high)
                'low_blink_threshold': 17,       # Alert if <17 blinks/min (low)
                'minimum_samples': 5,            # Need at least 5 samples
                'cooldown_seconds': 300          # 5 minutes between alerts
            },
            'hydration': {
                'dry_lips_threshold': 60,        # Alert if >60% dry lips
                'minimum_samples': 5,            # Need at least 5 samples
                'cooldown_seconds': 300          # 5 minutes between alerts
            }
        }
        self.last_alert_times = {}
        
    def check_posture_alert(self):
        """Check if bad posture exceeds threshold and generate alerts"""
        try:
            # Get posture average for the last 5 minutes
            posture_avg = self.db_manager.calculate_prediction_average('posture', minutes=5)
            
            if not posture_avg:
                logger.debug("No posture data available for alert check")
                return
                
            bad_posture_percentage = posture_avg.get('bad_posture_percentage', 0)
            total_samples = posture_avg.get('total_samples', 0)
            
            logger.debug(f"Posture check: {bad_posture_percentage:.1f}% bad posture ({total_samples} samples)")
            
            # Only trigger if we have enough samples
            if total_samples < self.alert_thresholds['posture']['minimum_samples']:
                logger.debug(f"Not enough samples for alert ({total_samples} < {self.alert_thresholds['posture']['minimum_samples']})")
                return
                
            # Check if bad posture exceeds threshold
            threshold = self.alert_thresholds['posture']['bad_percentage_threshold']
            if bad_posture_percentage > threshold:
                cooldown = self.alert_thresholds['posture']['cooldown_seconds']
                if self._can_trigger_alert('bad_posture', cooldown):
                    self.db_manager.save_alert(
                        'posture',
                        f'Poor posture detected! {bad_posture_percentage:.1f}% bad posture in the last 5 minutes',
                        'warning',
                        {
                            'bad_posture_percentage': bad_posture_percentage,
                            'total_samples': total_samples,
                            'good_posture_count': posture_avg.get('good_posture_count', 0),
                            'bad_posture_count': posture_avg.get('bad_posture_count', 0),
                            'threshold': threshold
                        }
                    )
                    self._update_alert_time('bad_posture')
                    logger.warning(f"ðŸš¨ Bad posture alert triggered: {bad_posture_percentage:.1f}% (threshold: {threshold}%)")
                else:
                    logger.debug(f"Bad posture detected but still in cooldown period")
            else:
                logger.debug(f"Posture within acceptable range: {bad_posture_percentage:.1f}% < {threshold}%")
                
        except Exception as e:
            logger.error(f"Error checking posture alert: {e}")
    
    def trigger_immediate_posture_alert(self, bad_posture_percentage, context_data=None):
        """Directly trigger a posture alert bypassing normal checks
        
        Args:
            bad_posture_percentage (float): The percentage of bad posture
            context_data (dict): Additional context data for the alert
        """
        try:
            alert_data = {
                'bad_posture_percentage': bad_posture_percentage,
                'trigger_type': 'immediate',
                'timestamp': int(time.time() * 1000)
            }
            
            if context_data:
                alert_data.update(context_data)
            
            self.db_manager.save_alert(
                'posture',
                f'Poor posture detected! {bad_posture_percentage:.1f}% bad posture',
                'warning',
                alert_data
            )
            
            logger.warning(f"ðŸš¨ Immediate posture alert triggered: {bad_posture_percentage:.1f}%")
            
        except Exception as e:
            logger.error(f"Error triggering immediate posture alert: {e}")
    
    def check_cvs_alert(self):
        """Check eye blink rate and generate alerts for Computer Vision Syndrome (CVS)"""
        try:
            # Get CVS (eye blink) average for the last 5 minutes
            cvs_avg = self.db_manager.calculate_prediction_average('cvs', minutes=5)
            
            if not cvs_avg:
                logger.debug("No eye blink data available for CVS alert check")
                return
                
            avg_blink_count = cvs_avg.get('avg_blink_count', 0)
            high_blink_percentage = cvs_avg.get('high_blink_percentage', 0)
            low_blink_percentage = cvs_avg.get('low_blink_percentage', 0)
            total_samples = cvs_avg.get('total_samples', 0)
            
            logger.debug(f"CVS check: Avg {avg_blink_count:.1f} blinks/min, {high_blink_percentage:.1f}% high, {low_blink_percentage:.1f}% low ({total_samples} samples)")
            
            # Only trigger if we have enough samples
            if total_samples < self.alert_thresholds['cvs']['minimum_samples']:
                logger.debug(f"Not enough samples for CVS alert ({total_samples} < {self.alert_thresholds['cvs']['minimum_samples']})")
                return
                
            # Check for high blink rate (eye fatigue)
            high_threshold = self.alert_thresholds['cvs']['high_blink_threshold']
            if avg_blink_count > high_threshold and high_blink_percentage > 60:
                cooldown = self.alert_thresholds['cvs']['cooldown_seconds']
                if self._can_trigger_alert('high_blink_rate', cooldown):
                    self.db_manager.save_alert(
                        'cvs',
                        f'High blink rate detected! Average {avg_blink_count:.1f} blinks/min indicates eye fatigue. Take a break.',
                        'warning',
                        {
                            'avg_blink_count': avg_blink_count,
                            'high_blink_percentage': high_blink_percentage,
                            'total_samples': total_samples,
                            'threshold': high_threshold,
                            'alert_type': 'high_blink_rate'
                        }
                    )
                    self._update_alert_time('high_blink_rate')
                    logger.warning(f"ðŸš¨ High blink rate alert triggered: {avg_blink_count:.1f} blinks/min (threshold: {high_threshold})")
                else:
                    logger.debug(f"High blink rate detected but still in cooldown period")
            
            # Check for low blink rate (dry eyes)
            low_threshold = self.alert_thresholds['cvs']['low_blink_threshold']
            if avg_blink_count < low_threshold and low_blink_percentage > 60:
                cooldown = self.alert_thresholds['cvs']['cooldown_seconds']
                if self._can_trigger_alert('low_blink_rate', cooldown):
                    self.db_manager.save_alert(
                        'cvs',
                        f'Low blink rate detected! Average {avg_blink_count:.1f} blinks/min indicates dry eyes. Take a break and rest your eyes.',
                        'warning',
                        {
                            'avg_blink_count': avg_blink_count,
                            'low_blink_percentage': low_blink_percentage,
                            'total_samples': total_samples,
                            'threshold': low_threshold,
                            'alert_type': 'low_blink_rate'
                        }
                    )
                    self._update_alert_time('low_blink_rate')
                    logger.warning(f"ðŸš¨ Low blink rate alert triggered: {avg_blink_count:.1f} blinks/min (threshold: {low_threshold})")
                else:
                    logger.debug(f"Low blink rate detected but still in cooldown period")
            
            # If blink rate is normal, log it
            if low_threshold <= avg_blink_count <= high_threshold:
                logger.debug(f"Blink rate within normal range: {avg_blink_count:.1f} blinks/min")
                
        except Exception as e:
            logger.error(f"Error checking CVS alert: {e}")
    
    def trigger_immediate_cvs_alert(self, blink_count, is_high=True, context_data=None):
        """Directly trigger a CVS alert bypassing normal checks
        
        Args:
            blink_count (float): The number of blinks per minute
            is_high (bool): True if high blink rate, False if low blink rate
            context_data (dict): Additional context data for the alert
        """
        try:
            alert_type = 'high_blink_rate' if is_high else 'low_blink_rate'
            alert_message = (f'High blink rate detected! {blink_count:.1f} blinks/min indicates eye fatigue. Take a break.' if is_high
                             else f'Low blink rate detected! {blink_count:.1f} blinks/min indicates dry eyes. Take a break and rest your eyes.')
            
            alert_data = {
                'blink_count': blink_count,
                'alert_type': alert_type,
                'trigger_type': 'immediate',
                'timestamp': int(time.time() * 1000)
            }
            
            if context_data:
                alert_data.update(context_data)
            
            self.db_manager.save_alert(
                'cvs',
                alert_message,
                'warning',
                alert_data
            )
            
            logger.warning(f"ðŸš¨ Immediate CVS alert triggered: {blink_count:.1f} blinks/min ({alert_type})")
            
        except Exception as e:
            logger.error(f"Error triggering immediate CVS alert: {e}")
    
    def check_hydration_alert(self):
        """Check if dry lips exceed threshold and generate hydration alerts"""
        try:
            # Get hydration average for the last 5 minutes
            hydration_avg = self.db_manager.calculate_prediction_average('hydration', minutes=5)
            
            if not hydration_avg:
                logger.debug("No hydration data available for alert check")
                return
                
            dry_lips_percentage = hydration_avg.get('dry_lips_percentage', 0)
            total_samples = hydration_avg.get('total_samples', 0)
            
            logger.debug(f"Hydration check: {dry_lips_percentage:.1f}% dry lips ({total_samples} samples)")
            
            # Only trigger if we have enough samples
            if total_samples < self.alert_thresholds['hydration']['minimum_samples']:
                logger.debug(f"Not enough samples for hydration alert ({total_samples} < {self.alert_thresholds['hydration']['minimum_samples']})")
                return
                
            # Check if dry lips percentage exceeds threshold
            threshold = self.alert_thresholds['hydration']['dry_lips_threshold']
            if dry_lips_percentage > threshold:
                cooldown = self.alert_thresholds['hydration']['cooldown_seconds']
                if self._can_trigger_alert('dry_lips', cooldown):
                    self.db_manager.save_alert(
                        'hydration',
                        f'Dehydration detected! Your lips appear dry {dry_lips_percentage:.1f}% of the time. Please drink some water.',
                        'warning',
                        {
                            'dry_lips_percentage': dry_lips_percentage,
                            'total_samples': total_samples,
                            'normal_lips_count': hydration_avg.get('normal_lips_count', 0),
                            'dry_lips_count': hydration_avg.get('dry_lips_count', 0),
                            'threshold': threshold
                        }
                    )
                    self._update_alert_time('dry_lips')
                    logger.warning(f"ðŸš¨ Hydration alert triggered: {dry_lips_percentage:.1f}% dry lips (threshold: {threshold}%)")
                else:
                    logger.debug(f"Dry lips detected but still in cooldown period")
            else:
                logger.debug(f"Hydration within acceptable range: {dry_lips_percentage:.1f}% < {threshold}%")
                
        except Exception as e:
            logger.error(f"Error checking hydration alert: {e}")
    
    def trigger_immediate_hydration_alert(self, dry_lips_percentage, context_data=None):
        """Directly trigger a hydration alert bypassing normal checks
        
        Args:
            dry_lips_percentage (float): The percentage of dry lips
            context_data (dict): Additional context data for the alert
        """
        try:
            alert_data = {
                'dry_lips_percentage': dry_lips_percentage,
                'trigger_type': 'immediate',
                'timestamp': int(time.time() * 1000)
            }
            
            if context_data:
                alert_data.update(context_data)
            
            self.db_manager.save_alert(
                'hydration',
                f'Dehydration detected! Your lips appear dry {dry_lips_percentage:.1f}% of the time. Please drink some water.',
                'warning',
                alert_data
            )
            
            logger.warning(f"ðŸš¨ Immediate hydration alert triggered: {dry_lips_percentage:.1f}% dry lips")
            
        except Exception as e:
            logger.error(f"Error triggering immediate hydration alert: {e}")
    
    def _can_trigger_alert(self, alert_type, cooldown_seconds=300):
        """Check if enough time has passed to trigger an alert
        
        Args:
            alert_type (str): Type of alert
            cooldown_seconds (int): Minimum seconds between alerts of this type
            
        Returns:
            bool: True if alert can be triggered, False if still in cooldown
        """
        if alert_type not in self.last_alert_times:
            return True
            
        last_time = self.last_alert_times[alert_type]
        time_elapsed = time.time() - last_time
        
        logger.debug(f"Alert cooldown check for {alert_type}: {time_elapsed:.1f}s elapsed (need {cooldown_seconds}s)")
        
        return time_elapsed >= cooldown_seconds
    
    def _update_alert_time(self, alert_type):
        """Update the last time an alert was triggered
        
        Args:
            alert_type (str): Type of alert
        """
        self.last_alert_times[alert_type] = time.time()
        logger.debug(f"Updated last alert time for {alert_type}")
    
    def get_alert_status(self):
        """Get current alert status and statistics
        
        Returns:
            dict: Alert status information
        """
        try:
            # Get recent alerts
            recent_alerts = self.db_manager.get_recent_alerts(limit=10)
            posture_alerts = [alert for alert in recent_alerts if alert.get('type') == 'posture']
            cvs_alerts = [alert for alert in recent_alerts if alert.get('type') == 'cvs']
            hydration_alerts = [alert for alert in recent_alerts if alert.get('type') == 'hydration']
            
            # Get statistics
            posture_avg = self.db_manager.calculate_prediction_average('posture', minutes=5)
            cvs_avg = self.db_manager.calculate_prediction_average('cvs', minutes=5)
            hydration_avg = self.db_manager.calculate_prediction_average('hydration', minutes=5)
            
            return {
                'total_alerts': len(recent_alerts),
                'posture_alerts': len(posture_alerts),
                'cvs_alerts': len(cvs_alerts),
                'hydration_alerts': len(hydration_alerts),
                'recent_alerts': recent_alerts[:5],  # Last 5 alerts
                'recent_posture_alerts': posture_alerts[:5],  # Last 5 posture alerts
                'recent_cvs_alerts': cvs_alerts[:5],  # Last 5 CVS alerts
                'recent_hydration_alerts': hydration_alerts[:5],  # Last 5 hydration alerts
                'current_posture_stats': posture_avg,
                'current_cvs_stats': cvs_avg,
                'current_hydration_stats': hydration_avg,
                'last_alert_times': self.last_alert_times.copy()
            }
            
        except Exception as e:
            logger.error(f"Error getting alert status: {e}")
            return {
                'error': str(e),
                'total_alerts': 0,
                'posture_alerts': 0,
                'cvs_alerts': 0,
                'hydration_alerts': 0,
                'recent_alerts': [],
                'recent_posture_alerts': [],
                'recent_cvs_alerts': [],
                'recent_hydration_alerts': [],
                'current_posture_stats': None,
                'current_cvs_stats': None,
                'current_hydration_stats': None,
                'last_alert_times': {}
            } 