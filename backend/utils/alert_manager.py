import logging
import time
from datetime import datetime, timedelta

# Configure logger
logger = logging.getLogger('EDUGuard.AlertManager')

class AlertManager:
    """Manages alerts generated by the monitoring system"""
    
    ALERT_LEVELS = {
        'info': 0,
        'warning': 1, 
        'critical': 2
    }
    
    def __init__(self, db_manager):
        """Initialize the alert manager
        
        Args:
            db_manager: Database manager instance for storing alerts
        """
        self.db_manager = db_manager
        self.alert_thresholds = {
            'attention': {
                'low': 0.3,       # Low attention threshold
                'medium': 0.5,    # Medium attention threshold
                'duration': 60    # Seconds to trigger alert
            },
            'absence': {
                'duration': 30    # Seconds to trigger absence alert
            },
            'emotion': {
                'negative_threshold': 0.7,  # Threshold for negative emotions
                'duration': 60             # Seconds to trigger alert
            }
        }
        self.last_alert_times = {}
        
    def check_all_alerts(self):
        """Run all alert checks"""
        self.check_attention_alert()
        self.check_absence_alert()
        self.check_emotion_alert()
        
    def check_attention_alert(self):
        """Check if attention levels are below threshold and generate alerts"""
        try:
            # Get recent attention predictions (last 2 minutes)
            attention_data = self.db_manager.get_recent_predictions('attention', minutes=2)
            
            if not attention_data or len(attention_data) < 5:
                # Not enough data points
                return
                
            # Calculate average attention
            attention_values = [
                float(p.get('prediction', {}).get('attention', 0)) 
                for p in attention_data
            ]
            avg_attention = sum(attention_values) / len(attention_values)
            
            # Check against thresholds
            if avg_attention < self.alert_thresholds['attention']['low']:
                # Check if we should trigger (not too recent)
                if self._can_trigger_alert('attention_low', 300):  # 5 minutes between alerts
                    self.db_manager.save_alert(
                        'attention',
                        'Very low attention detected',
                        'critical',
                        {'attention_score': avg_attention}
                    )
                    self._update_alert_time('attention_low')
            elif avg_attention < self.alert_thresholds['attention']['medium']:
                # Check if we should trigger (not too recent)
                if self._can_trigger_alert('attention_medium', 600):  # 10 minutes between alerts
                    self.db_manager.save_alert(
                        'attention',
                        'Reduced attention detected',
                        'warning',
                        {'attention_score': avg_attention}
                    )
                    self._update_alert_time('attention_medium')
        except Exception as e:
            logger.error(f"Error checking attention alert: {e}")
    
    def check_absence_alert(self):
        """Check if the user is absent and generate alerts"""
        try:
            # Get recent face detection predictions
            face_data = self.db_manager.get_recent_predictions('face_count', minutes=1)
            
            if not face_data:
                # No data available
                return
                
            # Get the last few face detections and check if faces were present
            recent_faces = face_data[-5:] if len(face_data) >= 5 else face_data
            faces_present = [p.get('prediction', {}).get('face_count', 0) > 0 for p in recent_faces]
            
            # If no faces in the last few frames, trigger absence alert
            if not any(faces_present) and self._can_trigger_alert('absence', 120):  # 2 minutes between alerts
                self.db_manager.save_alert(
                    'absence',
                    'No face detected - user may be absent',
                    'warning',
                    {'consecutive_empty_frames': len(recent_faces)}
                )
                self._update_alert_time('absence')
        except Exception as e:
            logger.error(f"Error checking absence alert: {e}")
    
    def check_emotion_alert(self):
        """Check if negative emotions are detected and generate alerts"""
        try:
            # Get recent emotion predictions
            emotion_data = self.db_manager.get_recent_predictions('emotion', minutes=2)
            
            if not emotion_data or len(emotion_data) < 3:
                # Not enough data
                return
                
            # Track negative emotions (sad, angry, fearful)
            negative_emotions = ['sad', 'angry', 'fearful']
            
            # Calculate average of negative emotions
            negative_scores = []
            for prediction in emotion_data:
                emotions = prediction.get('prediction', {}).get('emotion', {})
                neg_score = sum(float(emotions.get(emotion, 0)) for emotion in negative_emotions)
                negative_scores.append(neg_score)
                
            if not negative_scores:
                return
                
            avg_negative = sum(negative_scores) / len(negative_scores)
            
            # If negative emotions are high, generate alert
            if avg_negative > self.alert_thresholds['emotion']['negative_threshold']:
                if self._can_trigger_alert('negative_emotion', 900):  # 15 minutes between alerts
                    self.db_manager.save_alert(
                        'emotion',
                        'Strong negative emotions detected',
                        'warning',
                        {'negative_score': avg_negative}
                    )
                    self._update_alert_time('negative_emotion')
        except Exception as e:
            logger.error(f"Error checking emotion alert: {e}")
    
    def _can_trigger_alert(self, alert_type, cooldown_seconds=300):
        """Check if enough time has passed to trigger an alert
        
        Args:
            alert_type (str): Type of alert
            cooldown_seconds (int): Minimum seconds between alerts of this type
            
        Returns:
            bool: True if alert can be triggered, False if still in cooldown
        """
        if alert_type not in self.last_alert_times:
            return True
            
        last_time = self.last_alert_times[alert_type]
        time_elapsed = time.time() - last_time
        
        return time_elapsed >= cooldown_seconds
    
    def _update_alert_time(self, alert_type):
        """Update the last time an alert was triggered
        
        Args:
            alert_type (str): Type of alert
        """
        self.last_alert_times[alert_type] = time.time() 